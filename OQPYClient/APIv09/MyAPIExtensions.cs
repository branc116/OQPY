// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OQPYClient.APIv03
{
    using OQPYModels.Models;
    using OQPYModels.Models.CoreModels;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MyAPI.
    /// </summary>
    public static partial class MyAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Reservation> ApiReservationsAllGet(this IMyAPI operations)
            {
                return operations.ApiReservationsAllGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Reservation>> ApiReservationsAllGetAsync(this IMyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReservationsAllGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Reservation ApiReservationsGet(this IMyAPI operations, string id = default(string))
            {
                return operations.ApiReservationsGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Reservation> ApiReservationsGetAsync(this IMyAPI operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReservationsGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reservation'>
            /// </param>
            public static void ApiReservationsPost(this IMyAPI operations, Reservation reservation = default(Reservation))
            {
                operations.ApiReservationsPostAsync(reservation).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reservation'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReservationsPostAsync(this IMyAPI operations, Reservation reservation = default(Reservation), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReservationsPostWithHttpMessagesAsync(reservation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='reservation'>
            /// </param>
            public static void ApiReservationsByIdPut(this IMyAPI operations, string id, Reservation reservation = default(Reservation))
            {
                operations.ApiReservationsByIdPutAsync(id, reservation).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='reservation'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReservationsByIdPutAsync(this IMyAPI operations, string id, Reservation reservation = default(Reservation), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReservationsByIdPutWithHttpMessagesAsync(id, reservation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiReservationsByIdDelete(this IMyAPI operations, string id)
            {
                operations.ApiReservationsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReservationsByIdDeleteAsync(this IMyAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReservationsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venueId'>
            /// </param>
            public static IList<Reservation> ApiReservationsVenueReservationGet(this IMyAPI operations, string venueId = default(string))
            {
                return operations.ApiReservationsVenueReservationGetAsync(venueId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venueId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Reservation>> ApiReservationsVenueReservationGetAsync(this IMyAPI operations, string venueId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReservationsVenueReservationGetWithHttpMessagesAsync(venueId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// </param>
            public static IList<Reservation> ApiReservationsResourceReservationGet(this IMyAPI operations, string resourceId = default(string))
            {
                return operations.ApiReservationsResourceReservationGetAsync(resourceId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Reservation>> ApiReservationsResourceReservationGetAsync(this IMyAPI operations, string resourceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReservationsResourceReservationGetWithHttpMessagesAsync(resourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// </param>
            /// <param name='fromParameter'>
            /// </param>
            /// <param name='to'>
            /// </param>
            public static void ApiReservationsResourceReservationPost(this IMyAPI operations, string resourceId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?))
            {
                operations.ApiReservationsResourceReservationPostAsync(resourceId, fromParameter, to).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// </param>
            /// <param name='fromParameter'>
            /// </param>
            /// <param name='to'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReservationsResourceReservationPostAsync(this IMyAPI operations, string resourceId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReservationsResourceReservationPostWithHttpMessagesAsync(resourceId, fromParameter, to, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// </param>
            /// <param name='fromParameter'>
            /// </param>
            /// <param name='to'>
            /// </param>
            public static void ApiReservationsResourceReservationDelete(this IMyAPI operations, string resourceId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?))
            {
                operations.ApiReservationsResourceReservationDeleteAsync(resourceId, fromParameter, to).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// </param>
            /// <param name='fromParameter'>
            /// </param>
            /// <param name='to'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReservationsResourceReservationDeleteAsync(this IMyAPI operations, string resourceId = default(string), System.DateTime? fromParameter = default(System.DateTime?), System.DateTime? to = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReservationsResourceReservationDeleteWithHttpMessagesAsync(resourceId, fromParameter, to, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='secretCode'>
            /// </param>
            public static Reservation ApiReservationsSecretCodeReservationGet(this IMyAPI operations, string secretCode = default(string))
            {
                return operations.ApiReservationsSecretCodeReservationGetAsync(secretCode).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='secretCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Reservation> ApiReservationsSecretCodeReservationGetAsync(this IMyAPI operations, string secretCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReservationsSecretCodeReservationGetWithHttpMessagesAsync(secretCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Resource> ApiResourcesGet(this IMyAPI operations)
            {
                return operations.ApiResourcesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Resource>> ApiResourcesGetAsync(this IMyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiResourcesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resource'>
            /// </param>
            public static void ApiResourcesPost(this IMyAPI operations, Resource resource = default(Resource))
            {
                operations.ApiResourcesPostAsync(resource).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resource'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiResourcesPostAsync(this IMyAPI operations, Resource resource = default(Resource), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiResourcesPostWithHttpMessagesAsync(resource, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiResourcesByIdGet(this IMyAPI operations, string id)
            {
                operations.ApiResourcesByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiResourcesByIdGetAsync(this IMyAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiResourcesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='resource'>
            /// </param>
            public static void ApiResourcesByIdPut(this IMyAPI operations, string id, Resource resource = default(Resource))
            {
                operations.ApiResourcesByIdPutAsync(id, resource).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='resource'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiResourcesByIdPutAsync(this IMyAPI operations, string id, Resource resource = default(Resource), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiResourcesByIdPutWithHttpMessagesAsync(id, resource, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiResourcesByIdDelete(this IMyAPI operations, string id)
            {
                operations.ApiResourcesByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiResourcesByIdDeleteAsync(this IMyAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiResourcesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='oQPYed'>
            /// </param>
            /// <param name='secretCode'>
            /// </param>
            public static void ApiResourcesIOTPost(this IMyAPI operations, string id = default(string), string oQPYed = default(string), string secretCode = default(string))
            {
                operations.ApiResourcesIOTPostAsync(id, oQPYed, secretCode).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='oQPYed'>
            /// </param>
            /// <param name='secretCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiResourcesIOTPostAsync(this IMyAPI operations, string id = default(string), string oQPYed = default(string), string secretCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiResourcesIOTPostWithHttpMessagesAsync(id, oQPYed, secretCode, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Review> ApiReviewsAllGet(this IMyAPI operations)
            {
                return operations.ApiReviewsAllGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Review>> ApiReviewsAllGetAsync(this IMyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReviewsAllGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Review ApiReviewsGet(this IMyAPI operations, string id = default(string))
            {
                return operations.ApiReviewsGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Review> ApiReviewsGetAsync(this IMyAPI operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReviewsGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='review'>
            /// </param>
            public static void ApiReviewsPost(this IMyAPI operations, Review review = default(Review))
            {
                operations.ApiReviewsPostAsync(review).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='review'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReviewsPostAsync(this IMyAPI operations, Review review = default(Review), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReviewsPostWithHttpMessagesAsync(review, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='review'>
            /// </param>
            public static void ApiReviewsByIdPut(this IMyAPI operations, string id, Review review = default(Review))
            {
                operations.ApiReviewsByIdPutAsync(id, review).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='review'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReviewsByIdPutAsync(this IMyAPI operations, string id, Review review = default(Review), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReviewsByIdPutWithHttpMessagesAsync(id, review, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiReviewsByIdDelete(this IMyAPI operations, string id)
            {
                operations.ApiReviewsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReviewsByIdDeleteAsync(this IMyAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReviewsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venueId'>
            /// </param>
            public static IList<Review> ApiReviewsVenueReviewGet(this IMyAPI operations, string venueId = default(string))
            {
                return operations.ApiReviewsVenueReviewGetAsync(venueId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venueId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Review>> ApiReviewsVenueReviewGetAsync(this IMyAPI operations, string venueId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReviewsVenueReviewGetWithHttpMessagesAsync(venueId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='comment'>
            /// </param>
            /// <param name='venueId'>
            /// </param>
            /// <param name='rating'>
            /// </param>
            public static void ApiReviewsVenueReviewPost(this IMyAPI operations, string comment = default(string), string venueId = default(string), int? rating = default(int?))
            {
                operations.ApiReviewsVenueReviewPostAsync(comment, venueId, rating).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='comment'>
            /// </param>
            /// <param name='venueId'>
            /// </param>
            /// <param name='rating'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReviewsVenueReviewPostAsync(this IMyAPI operations, string comment = default(string), string venueId = default(string), int? rating = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReviewsVenueReviewPostWithHttpMessagesAsync(comment, venueId, rating, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reviewId'>
            /// </param>
            /// <param name='venueId'>
            /// </param>
            public static void ApiReviewsVenueReviewDelete(this IMyAPI operations, string reviewId = default(string), string venueId = default(string))
            {
                operations.ApiReviewsVenueReviewDeleteAsync(reviewId, venueId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reviewId'>
            /// </param>
            /// <param name='venueId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReviewsVenueReviewDeleteAsync(this IMyAPI operations, string reviewId = default(string), string venueId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReviewsVenueReviewDeleteWithHttpMessagesAsync(reviewId, venueId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reviewId'>
            /// </param>
            /// <param name='like'>
            /// </param>
            public static void ApiReviewsLikeGet(this IMyAPI operations, string reviewId = default(string), string like = default(string))
            {
                operations.ApiReviewsLikeGetAsync(reviewId, like).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reviewId'>
            /// </param>
            /// <param name='like'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReviewsLikeGetAsync(this IMyAPI operations, string reviewId = default(string), string like = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReviewsLikeGetWithHttpMessagesAsync(reviewId, like, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Tag> ApiTagsAllGet(this IMyAPI operations)
            {
                return operations.ApiTagsAllGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Tag>> ApiTagsAllGetAsync(this IMyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTagsAllGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Tag ApiTagsGet(this IMyAPI operations, string id = default(string))
            {
                return operations.ApiTagsGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tag> ApiTagsGetAsync(this IMyAPI operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTagsGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tag'>
            /// </param>
            public static void ApiTagsPost(this IMyAPI operations, Tag tag = default(Tag))
            {
                operations.ApiTagsPostAsync(tag).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tag'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTagsPostAsync(this IMyAPI operations, Tag tag = default(Tag), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTagsPostWithHttpMessagesAsync(tag, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='tag'>
            /// </param>
            public static void ApiTagsByIdPut(this IMyAPI operations, string id, Tag tag = default(Tag))
            {
                operations.ApiTagsByIdPutAsync(id, tag).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='tag'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTagsByIdPutAsync(this IMyAPI operations, string id, Tag tag = default(Tag), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTagsByIdPutWithHttpMessagesAsync(id, tag, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiTagsByIdDelete(this IMyAPI operations, string id)
            {
                operations.ApiTagsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTagsByIdDeleteAsync(this IMyAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTagsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venueId'>
            /// </param>
            public static IList<Tag> ApiTagsVenueTagsGet(this IMyAPI operations, string venueId = default(string))
            {
                return operations.ApiTagsVenueTagsGetAsync(venueId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venueId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Tag>> ApiTagsVenueTagsGetAsync(this IMyAPI operations, string venueId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTagsVenueTagsGetWithHttpMessagesAsync(venueId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='valueTag'>
            /// </param>
            /// <param name='venueId'>
            /// </param>
            public static void ApiTagsVenueTagsPost(this IMyAPI operations, string valueTag = default(string), string venueId = default(string))
            {
                operations.ApiTagsVenueTagsPostAsync(valueTag, venueId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='valueTag'>
            /// </param>
            /// <param name='venueId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTagsVenueTagsPostAsync(this IMyAPI operations, string valueTag = default(string), string venueId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTagsVenueTagsPostWithHttpMessagesAsync(valueTag, venueId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venueId'>
            /// </param>
            /// <param name='tagValue'>
            /// </param>
            public static void ApiTagsVenueTagsDelete(this IMyAPI operations, string venueId = default(string), string tagValue = default(string))
            {
                operations.ApiTagsVenueTagsDeleteAsync(venueId, tagValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venueId'>
            /// </param>
            /// <param name='tagValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTagsVenueTagsDeleteAsync(this IMyAPI operations, string venueId = default(string), string tagValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTagsVenueTagsDeleteWithHttpMessagesAsync(venueId, tagValue, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Venue> ApiVenuesAllGet(this IMyAPI operations)
            {
                return operations.ApiVenuesAllGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Venue>> ApiVenuesAllGetAsync(this IMyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiVenuesAllGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venue'>
            /// </param>
            public static void ApiVenuesPost(this IMyAPI operations, Venue venue = default(Venue))
            {
                operations.ApiVenuesPostAsync(venue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiVenuesPostAsync(this IMyAPI operations, Venue venue = default(Venue), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiVenuesPostWithHttpMessagesAsync(venue, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiVenuesDelete(this IMyAPI operations, string id = default(string))
            {
                operations.ApiVenuesDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiVenuesDeleteAsync(this IMyAPI operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiVenuesDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// </param>
            public static IList<Venue> ApiVenuesMultiGet(this IMyAPI operations, IList<string> ids = default(IList<string>))
            {
                return operations.ApiVenuesMultiGetAsync(ids).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Venue>> ApiVenuesMultiGetAsync(this IMyAPI operations, IList<string> ids = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiVenuesMultiGetWithHttpMessagesAsync(ids, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='names'>
            /// </param>
            public static void ApiVenuesMultiPost(this IMyAPI operations, IList<string> names = default(IList<string>))
            {
                operations.ApiVenuesMultiPostAsync(names).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='names'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiVenuesMultiPostAsync(this IMyAPI operations, IList<string> names = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiVenuesMultiPostWithHttpMessagesAsync(names, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venues'>
            /// </param>
            public static void ApiVenuesMultiFullPost(this IMyAPI operations, IList<Venue> venues = default(IList<Venue>))
            {
                operations.ApiVenuesMultiFullPostAsync(venues).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venues'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiVenuesMultiFullPostAsync(this IMyAPI operations, IList<Venue> venues = default(IList<Venue>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiVenuesMultiFullPostWithHttpMessagesAsync(venues, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Venue ApiVenuesSingleGet(this IMyAPI operations, string id = default(string))
            {
                return operations.ApiVenuesSingleGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Venue> ApiVenuesSingleGetAsync(this IMyAPI operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiVenuesSingleGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venue'>
            /// </param>
            public static void ApiVenuesSinglePost(this IMyAPI operations, Venue venue = default(Venue))
            {
                operations.ApiVenuesSinglePostAsync(venue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiVenuesSinglePostAsync(this IMyAPI operations, Venue venue = default(Venue), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiVenuesSinglePostWithHttpMessagesAsync(venue, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venueLike'>
            /// </param>
            public static IList<Venue> ApiVenuesFilterPost(this IMyAPI operations, Venue venueLike = default(Venue))
            {
                return operations.ApiVenuesFilterPostAsync(venueLike).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='venueLike'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Venue>> ApiVenuesFilterPostAsync(this IMyAPI operations, Venue venueLike = default(Venue), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiVenuesFilterPostWithHttpMessagesAsync(venueLike, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
